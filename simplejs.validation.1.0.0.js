/**
* Generated by : Mustafa Sacli
*/
/**
* Dependencies Simple scripts;
* - simplejs.common.1.0.0.js
* -
*/

function setCssRed(obj) {
    obj.css('border-color', 'Red');
}

function setCssLightGreen(obj) {
    obj.css('border-color', 'lightgrey');
}

function validateDropDown(dropDownObj, minValue) {
    isValid = false;
    var val = dropDownObj.val();
    if (isNotNullAndUndefined(val) == false || isNullOrWhiteSpace(val)) {
        isValid = false;
        setCssRed(dropDownObj);
    }

    if ((val * 1) < (minValue * 1)) {
        isValid = false;
        setCssRed(dropDownObj);
    }
    else {
        isValid = true;
        setCssLightGreen(dropDownObj);
    }
    return isValid;
}

function validateInput(inputObj, isRequired = true) {
    isValid = true;

    var val = inputObj.val();

    if (isRequired === true && isNullOrWhiteSpace(val)) {
        isValid = false;
        return isValid;
    }

    var maxLen = inputObj.attr('maxlength');
    if (maxLen !== null && maxLen !== undefined) {
        if ((maxLen * 1) < val.length) {
            isValid = false;
            return isValid;
        }
    }

    return isValid;
}

function validateEMail(inputMail) {
    //debugger;
    if (isNotNullAndUndefined(inputMail) === false)
        return false;

    if (isNullOrWhiteSpace(inputMail))
        return false;

    //var filter = /^([a-zA-Z0-9_\.\-])+\@@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
    //return filter.test(inputMail);
    var result = false;
    const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    result = re.test(String(inputMail).toLowerCase());
    return result;
}

function removeTurkishChars(inputText) {
    if (isNotNullAndUndefined(inputText) === false)
        return inputText;

    var deger = inputText;
    var str = [];
    for (var i = 0; i < deger.length; i++) {
        var ch = deger.charCodeAt(i);
        var c = deger.charAt(i);
        if (ch == 304) str.push('i');
        else if (ch == 305) str.push('i');
        else if (ch == 287) str.push('g');
        else if (ch == 286) str.push('g');
        else if (ch == 220) str.push('u');
        else if (ch == 252) str.push('u');
        else if (ch == 351) str.push('s');
        else if (ch == 350) str.push('s');
        else if (ch == 246) str.push('o');
        else if (ch == 214) str.push('o');
        else if (ch == 231) str.push('c');
        else if (ch == 199) str.push('c');
        else if (ch >= 97 && ch <= 122) str.push(c.toLowerCase());
        else str.push(c.toLowerCase());
    }
    deger = str.join('');
    return deger;
}

function checkValueGreaterThanIntMaxValue(componentId) {
    var result = false;
    result = (($(componentId).val() * 1) > intMaxValue);
    return result;
}

function checkValueGreaterThanLongMaxValue(componentId) {
    var result = false;
    result = (($(componentId).val() * 1) > longMaxValue);
    return result;
}

function validateComponentValueLength(componentId, len) {
    var valid = true;

    if (toNullString($(componentId).val()).length > (len * 1))
        valid = false;

    return valid;
}

function validateDateValue(elementId) {
    let isValid = false;

    if (isNotNullAndUndefined(elementId) === false || isEmptyOrSpaces(elementId)) return isValid;

    let element = $('#' + elementId);
    if (isNotNullAndUndefined(element) === false) return isValid;

    let isRequired = isNotNullAndUndefined(element.attr('required'));

    let value = toNullString(element.val());

    if (!isRequired && isNullOrWhiteSpace(value)) return true;

    if (value.match(dateRegexFormat) && isNullOrWhiteSpace(value) === false) isValid = true;

    return isValid;
}

function validateForDateValue(elementId, mustRequired = false) {
    let validMessageCode = 1;

    if (isNotNullAndUndefined(elementId) === false || isEmptyOrSpaces(elementId)) {
        return validMessageCode;
    }

    let element = $('#' + elementId);
    if (isNotNullAndUndefined(element) === false) return validMessageCode;

    let isRequired = isNotNullAndUndefined(element.attr('required'));

    if (!isRequired || mustRequired) {
        let value = toNullString(element.val());
        if (isNullOrWhiteSpace(value)) {
            validMessageCode = -1;
            return validMessageCode;
        }

        if (!value.match(dateRegexFormat)) {
            validMessageCode = -2;
            return validMessageCode;
        }
    }

    return validMessageCode;
}